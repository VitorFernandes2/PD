def notifyProductionDeploy() {
    def packageVersion = sh(script: "grep \"version\" front-end/package.json | cut -d '\"' -f4 | tr -d '[[:space:]]'", returnStdout: true)
    def icons = [":unicorn_face:", ":beer:", ":bee:", ":man_dancing:",
    ":partying_face:", ":ghost:", ":dancer:", ":scream_cat:"]
    def randomIndex = (new Random()).nextInt(icons.size())
    def message = "@here Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME} ${packageVersion}> " +
    "successfuly deployed to the production ${icons[randomIndex]}"
    slackSend(channel: "#jenkins", message: message, color: 'good')

    mail to: "tppd2122@gmail.com",
        subject: "Build ${currentBuild.displayName} ${env.JOB_NAME}",
        body: "Build ${currentBuild.displayName} ${env.JOB_NAME} ${packageVersion} \n${env.BUILD_URL}\n" +
        "successfuly deployed to the production!"
}

def notifyProductionDeployFails() {
    def icons = [":skull_and_crossbones:", ":face_palm:", ":see_no_evil:", ":no_good:",
    ":no_entry:", ":disguised_face:",]
    def randomIndex = (new Random()).nextInt(icons.size())
    def message = "@here Shame on you! Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME}> " +
    "deploy failed! ${icons[randomIndex]}"
    slackSend(channel: "#jenkins", message: message, color: 'danger')

    mail to: "tppd2122@gmail.com",
        subject: "Build ${currentBuild.displayName} ${env.JOB_NAME}",
        body: "Build ${currentBuild.displayName} ${env.JOB_NAME} \n${env.BUILD_URL}\ndeploy failed!"
}
def notifyProductionDeployStarted(){
    def message = "@here Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME}> deploy starts!"
    slackSend(channel: "#jenkins", message: message, color: 'warning')
}

def notifyBuildStarted(){
    def message = "@here Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME}> starts!" +
    "\nBranch: <${env.GIT_URL - '.git' }/tree/${env.BRANCH}|${env.BRANCH}>"
    slackSend(channel: "#jenkins", message: message, color: 'warning')
}
def notifyBuildSuccess(){
    def message = "@here Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME}> succeeded!"
    slackSend(channel: "#jenkins", message: message, color: 'good')

}
def notifyBuildFailed(){
    def message = "@here Shame on you! Build <${env.BUILD_URL}|${currentBuild.displayName} ${env.JOB_NAME}> failed!"
    slackSend(channel: "#jenkins", message: message, color: 'danger')
    mail to: "tppd2122@gmail.com",
        subject: "Build ${currentBuild.displayName} ${env.JOB_NAME}",
        body: "Shame on you! Build ${currentBuild.displayName} ${env.JOB_NAME} \n${env.BUILD_URL}\nfailed!"
}

pipeline {
    agent any
	tools {
        nodejs "node"
   	}
    stages {
        stage('Build FrontEnd') {
            steps {
                cleanWs()
                notifyBuildStarted()
            	checkout scm
            	sh '''
                  cd front-end
                  npm install
                  npm run build
                '''
            }
            post {
                success {
                    notifyBuildSuccess()
                    archiveArtifacts 'front-end/dist/'
                }
                failure {
                    notifyBuildFailed()
                }
            }
        }
        stage ('Push to Docker') {
            when {
                expression {
                    env.BRANCH.contains("release")
                }
            }
            steps {
                notifyProductionDeployStarted()
                script {
                    def packageVersion = sh(script: "grep \"version\" front-end/package.json | cut -d '\"' -f4 | tr -d '[[:space:]]'", returnStdout: true)
                    echo "Version is ${packageVersion}"
                    sh '''
                     mv front-end/Dockerfile Dockerfile
                    '''
                    dockerImage = docker.build("tppd2122/frontend")
                    docker.withRegistry( '', 'dockerhub') {
                        dockerImage.push("${packageVersion}")
                        dockerImage.push('latest')
                    }
                }
            }
            post {
                success {
                    notifyProductionDeploy()
                }
                failure {
                    notifyProductionDeployFails()
                }
            }
        }
    }
}
